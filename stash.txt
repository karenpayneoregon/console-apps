using System;
using System.Collections.Generic;
using System.Linq;
using Spectre.Console;
using Spectre.Console.Rendering;
using static System.Globalization.DateTimeFormatInfo;
using static System.DateTime;

namespace ConsoleStashApp
{
    partial class Program
    {
        static void Main(string[] args)
        {

            AnsiConsole.Write(
                new Panel(new Text("Solution folders are used to separate various third party libraries used to work with user interfaces for console projects.").Centered())
                    .Expand()
                    .SquareBorder()
                    .BorderStyle(new Style(Color.DarkViolet))
                    .Header("[white on DarkViolet]Center[/]")
                    .HeaderAlignment(Justify.Center));


            // do something with NorthWind
            AnsiConsole.Write(new BarChart()
                .Width(60)
                .Label("[green bold underline]Number of fruits[/]")
                .CenterLabel()
                .AddItem("Apple", 12, Color.Yellow)
                .AddItem("Orange", 54, Color.Green)
                .AddItem("Banana", 33, Color.Red));

            //GetBirthDate();
            //GetInt();
            //TableBorders();
            Console.ReadLine();
        }
        private static void PanelBorders()
        {
            static IRenderable CreatePanel(string name, BoxBorder border)
            {
                return new Panel($"This is a panel with\nthe [yellow]{name}[/] border. Solution folders are used to separate various third party libraries used to work with user interfaces for console projects.")
                    .Header($" [cyan]{name}[/] ", Justify.Center)
                    .Border(border)
                    .BorderStyle(Style.Parse("grey"))
                    .HeaderAlignment(Justify.Center);
            }

            var items = new[]
            {
                CreatePanel("Square", BoxBorder.Square),
                //CreatePanel("Double", BoxBorder.Double),
            };

            AnsiConsole.Write(
                new Padder(
                    new Columns(items).PadRight(1),
                    new Padding(2, 0, 20, 0)));
        }

        private static void TableBorders()
        {
            static IRenderable CreateTable(string name, TableBorder border)
            {
                var table = new Table().Border(border);
                table.AddColumn("[yellow]Header 1[/]", c => c.Footer("[grey]Footer 1[/]"));
                table.AddColumn("[yellow]Header 2[/]", col => col.Footer("[grey]Footer 2[/]").RightAligned());
                table.AddRow("Cell", "Cell");
                table.AddRow("Cell", "Cell");

                return new Panel(table).Header($" [blue]{name}[/] ", Justify.Center).NoBorder();
            }

            var items = new[]
            {
                CreateTable("Ascii", TableBorder.Ascii),
                CreateTable("Ascii2", TableBorder.Ascii2),
                CreateTable("AsciiDoubleHead", TableBorder.AsciiDoubleHead),
                CreateTable("Horizontal", TableBorder.Horizontal),
                CreateTable("Simple", TableBorder.Simple),
                CreateTable("SimpleHeavy", TableBorder.SimpleHeavy),
                CreateTable("Minimal", TableBorder.Minimal),
                CreateTable("MinimalHeavyHead", TableBorder.MinimalHeavyHead),
                CreateTable("MinimalDoubleHead", TableBorder.MinimalDoubleHead),
                CreateTable("Square", TableBorder.Square),
                CreateTable("Rounded", TableBorder.Rounded),
                CreateTable("Heavy", TableBorder.Heavy),
                CreateTable("HeavyEdge", TableBorder.HeavyEdge),
                CreateTable("HeavyHead", TableBorder.HeavyHead),
                CreateTable("Double", TableBorder.Double),
                CreateTable("DoubleEdge", TableBorder.DoubleEdge),
                CreateTable("Markdown", TableBorder.Markdown),
            };

            AnsiConsole.Write(new Columns(items).Collapse());
        }

        private static void HorizontalRule(string title)
        {
            AnsiConsole.WriteLine();
            AnsiConsole.Write(new Rule($"[white bold]{title}[/]").RuleStyle("grey").LeftAligned());
            AnsiConsole.WriteLine();
        }

        /// <summary>
        /// Example to get a date
        /// 
        /// If an invalid date is entered an error message appears
        /// and the prompt is presented again. We can also use
        /// validation as in <see cref="GetInt"/>
        ///
        /// Press ENTER with no selection to cancel
        /// </summary>
        private static void GetBirthDate()
        {
            var birthDate = AnsiConsole.Prompt(
                new TextPrompt<DateTime>("What is your [green]birth date[/]?")
                    .PromptStyle("yellow")
                    .AllowEmpty());

            Console.WriteLine(birthDate == MinValue ? "No date entered" : $"{birthDate:d}");
        }

        /// <summary>
        /// Get an int with validation rather than the default validation alone
        /// </summary>
        private static void GetInt()
        {
            var result = AnsiConsole.Prompt(
                new TextPrompt<int>("How [green]old[/] are you?")
                    .PromptStyle("green")
                    .ValidationErrorMessage("[red]That's not a valid age[/]")
                    .Validate(age => age switch
                    {
                        <= 0 => ValidationResult.Error("[red]You must at least be 1 years old[/]"),
                        >= 123 => ValidationResult.Error("[red]You must be younger than the oldest person alive[/]"),
                        _ => ValidationResult.Success(),
                    }));

            Console.WriteLine(result);

        }

        private static List<string> GetFavoriteMonths() => AnsiConsole.Prompt
            (
                new MultiSelectionPrompt<string>()
                    .PageSize(12)
                    // permit no choice
                    .Required(false)
                    .Title("What are your [cyan]favorite months[/]?")
                    .InstructionsText("[grey](Press [yellow]<space>[/] to toggle a month, [yellow]<enter>[/] to accept)[/] or [red]Enter[/] w/o any selections to cancel")
                    .AddChoices(CurrentInfo!.MonthNames[..^1])
                    .HighlightStyle(new Style(Color.White, Color.Black, Decoration.Invert))
            );

        

    }
}
